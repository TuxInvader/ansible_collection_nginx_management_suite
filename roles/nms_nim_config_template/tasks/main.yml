---

- name: Fail if required variables are not defined
  assert:
    that: ({{ item }} is defined) and ({{ item }} | string | length > 0)
  loop:
    - nms_fqdn
    - nms_api_version
    - nms_validate_certs
    - nms_nim_config_template

- name: Get Config Template refs
  include_role: 
    name: nms_nim_get_config_template_refs

- name: Save our UID if we have one
  set_fact:
    nms_nim_config_template_uid: "{{ nms_nim_config_template.uid | default('') }}"

# Copy the config from the variable into a local fact for manipulation
- name: Set config fact
  set_fact:
    post_config: "{{ nms_nim_config_template }}"

# If nms_nim_encode_config_content is set, then expect the content to be raw and base64encode it before sending
- name: Encode file contents
  block:

  - name: Set config fact
    set_fact:
      post_config: "{{ nms_nim_config_template | combine({ 'configFiles': {'files': []}, 'auxFiles': {'files': []}}, recursive=True) }}"

  - name: Encode each config file
    set_fact:
      post_config: "{{  post_config | combine({ 'configFiles': {'files': [ {'contents': (file.contents|b64encode), 'name': file.name }]}}, list_merge='append', recursive=True) }}"
    loop: "{{ nms_nim_config_template.configFiles.files }}"
    loop_control:
      loop_var: file
    when:
    - nms_nim_config_template.configFiles is defined
    - nms_nim_config_template.configFiles.files is defined

  - name: Encode each aux file
    set_fact:
      post_config: "{{  post_config | combine({ 'auxFiles': {'files': [ {'contents': (file.contents|b64encode), 'name': file.name }]}}, list_merge='append', recursive=True) }}"
    loop: "{{ nms_nim_config_template.auxFiles.files }}"
    loop_control:
      loop_var: file
    when:
    - nms_nim_config_template.auxFiles is defined
    - nms_nim_config_template.auxFiles.files is defined

  when: nms_nim_encode_config_content

- name: Create NMS Config
  uri:
    url: "https://{{ nms_fqdn }}{{ nms_api_version }}/configs"
    method: POST
    body: "{{ post_config }}"
    body_format: json
    return_content: true
    status_code:
      - 201
    validate_certs: "{{ nms_validate_certs | default(false) }}"
    headers: "{{ nms_auth_headers }}"
  register: nms_post_response
  changed_when: nms_post_response.status == 201
  when: nms_nim_create_new_config or nms_nim_config_template_refs is undefined or nms_nim_config_template_refs[nms_nim_config_template.configName] is undefined

- name: Record generated UID
  set_fact:
    nms_nim_config_template_uid: "{{ nms_post_response.json.uid }}"
  when: "'json' in nms_post_response"

- name: Patch NMS Config (by UID)
  uri:
    url: "https://{{ nms_fqdn }}{{ nms_nim_config_template_refs[nms_nim_config_template.uid].rel }}"
    method: PUT
    body: "{{ post_config }}"
    body_format: json
    return_content: true
    status_code:
      - 200
    validate_certs: "{{ nms_validate_certs | default(false) }}"
    headers: "{{ nms_auth_headers }}"
  register: nms_put_response
  changed_when: nms_put_response.status == 200
  when:
  - nms_nim_create_new_config is false
  - "'uid' in nms_nim_config_template"
  - nms_nim_config_template_refs[nms_nim_config_template.uid] is defined

- name: Record patched UID
  set_fact:
    nms_nim_config_template_uid: "{{ nms_put_response.json.uid }}"
  when: "'json' in nms_put_response"

- name: Patch NMS Config (by name)
  uri:
    url: "https://{{ nms_fqdn }}{{ nms_nim_config_template_refs[nms_nim_config_template.configName].rel }}"
    method: PUT
    body: "{{ post_config }}"
    body_format: json
    return_content: true
    status_code:
      - 200
    validate_certs: "{{ nms_validate_certs | default(false) }}"
    headers: "{{ nms_auth_headers }}"
  register: nms_put_response
  changed_when: nms_put_response.status == 200
  when:
  - nms_nim_create_new_config is false
  - "'uid' not in nms_nim_config_template"
  - nms_nim_config_template_refs[nms_nim_config_template.configName] is defined

- name: Record patched UID
  set_fact:
    nms_nim_config_template_uid: "{{ nms_put_response.json.uid }}"
  when: "'json' in nms_put_response"

- name: Get Config Template refs
  include_role: 
    name: nms_nim_get_config_template_refs

