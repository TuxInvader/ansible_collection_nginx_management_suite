---

- name: Fail if required variables are not defined
  assert:
    that: ({{ item }} is defined) and ({{ item }} | string | length > 0)
  loop:
    - nms_fqdn
    - nms_api_version
    - nms_validate_certs

- name: GET all NMS-SM Policy status (no-content)
  uri:
    url: "https://{{ nms_fqdn }}{{ nms_api_version }}/security/policies?includePolicyContent={{nms_sm_policy_include_content}}"
    method: GET
    status_code:
      - 200
      - 404
    validate_certs: "{{ nms_validate_certs | default(false) }}"
    headers: "{{ nms_auth_headers }}"
  register: nms_sm_policy_status

- name: Reset nms_sm_policy_refs fact
  set_fact:
    nms_sm_policy_refs: {}

- name: Set nms_sm_policy_refs fact
  set_fact:
    nms_sm_policy_refs: "{{ nms_sm_policy_refs | default({}) | combine({ item.metadata.name: ( nms_sm_policy_refs[item.metadata.name] | default({}) |
                        combine({ 'versions': ( nms_sm_policy_refs[item.metadata.name].versions | default([]) + [item]), 
                        'rel': nms_api_version ~ '/security/policies/' ~ item.metadata.uid}, recursive=True) )}, recursive=True) }}"
  loop: "{{ nms_sm_policy_status.json['items'] }}"
  when: nms_sm_policy_decode_content is false or nms_sm_policy_include_content is false

- name: Set nms_sm_policy_refs fact
  set_fact:
    nms_sm_policy_refs: "{{ nms_sm_policy_refs | default({}) | combine({ item.metadata.name: ( nms_sm_policy_refs[item.metadata.name] | default({}) |
                        combine({ 'versions': ( nms_sm_policy_refs[item.metadata.name].versions | 
                        default([]) + [( item | combine({'content': (item.content | b64decode | from_json)})) ]),
                        'rel': nms_api_version ~ '/security/policies/' ~ item.metadata.uid}, recursive=True) )}, recursive=True) }}"
  loop: "{{ nms_sm_policy_status.json['items'] }}"
  when: 
  - nms_sm_policy_include_content
  - nms_sm_policy_decode_content

- name: Update link when UID is provided
  set_fact:
    nms_sm_policy_refs: "{{ nms_sm_policy_refs | default({}) | combine({ item.name: { 'rel': nms_api_version ~ '/security/policies/' ~ item.uid }}, recursive=True) }}" 
  vars:
    jmes_path: "*.versions[? metadata.uid == '{{ nms_sm_policy.metadata.uid }}' ].metadata[]"
  loop: "{{ nms_sm_policy_refs | json_query(jmes_path) }}"
  when: nms_sm_policy.metadata.uid is defined


